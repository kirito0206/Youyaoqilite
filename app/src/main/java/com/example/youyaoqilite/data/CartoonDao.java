package com.example.youyaoqilite.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARTOON".
*/
public class CartoonDao extends AbstractDao<Cartoon, String> {

    public static final String TABLENAME = "CARTOON";

    /**
     * Properties of entity Cartoon.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", true, "NAME");
        public final static Property Cover = new Property(1, String.class, "cover", false, "COVER");
        public final static Property Tags = new Property(2, String.class, "tags", false, "TAGS");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Comicid = new Property(4, String.class, "comicid", false, "COMICID");
    }


    public CartoonDao(DaoConfig config) {
        super(config);
    }
    
    public CartoonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARTOON\" (" + //
                "\"NAME\" TEXT PRIMARY KEY NOT NULL ," + // 0: name
                "\"COVER\" TEXT," + // 1: cover
                "\"TAGS\" TEXT," + // 2: tags
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"COMICID\" TEXT);"); // 4: comicid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARTOON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cartoon entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(2, cover);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(3, tags);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String comicid = entity.getComicid();
        if (comicid != null) {
            stmt.bindString(5, comicid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cartoon entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(2, cover);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(3, tags);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String comicid = entity.getComicid();
        if (comicid != null) {
            stmt.bindString(5, comicid);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Cartoon readEntity(Cursor cursor, int offset) {
        Cartoon entity = new Cartoon( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cover
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tags
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // comicid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cartoon entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCover(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTags(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setComicid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Cartoon entity, long rowId) {
        return entity.getName();
    }
    
    @Override
    public String getKey(Cartoon entity) {
        if(entity != null) {
            return entity.getName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Cartoon entity) {
        return entity.getName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
